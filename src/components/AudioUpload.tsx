import { useState, useRef, useEffect } from 'react';
import { Upload, FileAudio, X, Loader } from 'lucide-react';
import { transcribeLongAudio, generateSummary } from '../services/transcription';
import { supabase } from '../lib/supabase';
import { useBackgroundProcessing } from '../hooks/useBackgroundProcessing';
import { UploadQuotaErrorModal } from './UploadQuotaErrorModal';
import { QuotaFullModal } from './QuotaFullModal';
import { LowQuotaUploadWarningModal } from './LowQuotaUploadWarningModal';

interface AudioUploadProps {
  userId: string;
  onSuccess: (meetingId?: string) => void;
}

export const AudioUpload = ({ userId, onSuccess }: AudioUploadProps) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState('');
  const [meetingTitle, setMeetingTitle] = useState('');
  const [notes, setNotes] = useState('');
  const [audioDuration, setAudioDuration] = useState(0);
  const [isCalculatingDuration, setIsCalculatingDuration] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [showQuotaFullModal, setShowQuotaFullModal] = useState(false);
  const [showUploadQuotaError, setShowUploadQuotaError] = useState(false);
  const [uploadQuotaErrorData, setUploadQuotaErrorData] = useState({ audioDuration: 0, remainingMinutes: 0 });
  const [showLowQuotaUploadWarning, setShowLowQuotaUploadWarning] = useState(false);
  const [lowQuotaUploadData, setLowQuotaUploadData] = useState({ uploadMinutes: 0, remainingAfter: 0 });

  const { addTask, updateTask } = useBackgroundProcessing(userId);

  // Avertissement avant de quitter/rafra√Æchir la page pendant le traitement d'un upload
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      // V√©rifier si un traitement d'upload est en cours
      if (isProcessing) {
        e.preventDefault();
        // Message de confirmation (le navigateur affichera son propre message)
        const message = 'Un traitement d\'upload est en cours. Si vous quittez maintenant, vous perdrez votre progression. Voulez-vous vraiment quitter ?';
        e.returnValue = message; // Chrome/Edge
        return message; // Firefox/Safari
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [isProcessing]);

  // Fonction pour extraire la dur√©e d'un fichier audio (avec plusieurs tentatives)
  const getAudioDuration = (file: File): Promise<number> => {
    return new Promise((resolve) => {
      // M√©thode 1: Via l'√©l√©ment Audio HTML
      const tryAudioElement = () => {
        const audio = new Audio();
        audio.preload = 'metadata';

        let resolved = false;
        const timeoutId = setTimeout(() => {
          if (!resolved) {
            console.warn('‚ö†Ô∏è Timeout m√©thode Audio, tentative via Web Audio API...');
            resolved = true;
            window.URL.revokeObjectURL(audio.src);
            tryWebAudioAPI();
          }
        }, 8000); // 8 secondes pour laisser plus de temps

        audio.onloadedmetadata = () => {
          if (!resolved) {
            resolved = true;
            clearTimeout(timeoutId);
            const duration = Math.floor(audio.duration);
            console.log('‚úÖ Dur√©e extraite (Audio):', duration, 'secondes');
            window.URL.revokeObjectURL(audio.src);

            if (isNaN(duration) || !isFinite(duration) || duration <= 0) {
              console.warn('‚ö†Ô∏è Dur√©e invalide, tentative via Web Audio API...');
              tryWebAudioAPI();
            } else {
              resolve(duration);
            }
          }
        };

        audio.onerror = (e) => {
          if (!resolved) {
            resolved = true;
            clearTimeout(timeoutId);
            console.error('‚ùå Erreur Audio, tentative via Web Audio API...');
            window.URL.revokeObjectURL(audio.src);
            tryWebAudioAPI();
          }
        };

        try {
          audio.src = window.URL.createObjectURL(file);
          audio.load();
        } catch (error) {
          console.error('‚ùå Erreur cr√©ation URL, tentative via Web Audio API...');
          resolved = true;
          clearTimeout(timeoutId);
          tryWebAudioAPI();
        }
      };

      // M√©thode 2: Via Web Audio API (plus fiable pour certains formats)
      const tryWebAudioAPI = async () => {
        try {
          console.log('üîÑ Tentative extraction dur√©e via Web Audio API...');
          const arrayBuffer = await file.arrayBuffer();
          const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
          const duration = Math.floor(audioBuffer.duration);
          
          console.log('‚úÖ Dur√©e extraite (Web Audio API):', duration, 'secondes');
          audioContext.close();

          if (isNaN(duration) || !isFinite(duration) || duration <= 0) {
            console.warn('‚ö†Ô∏è Dur√©e invalide via Web Audio API aussi');
            estimateFromFileSize();
          } else {
            resolve(duration);
          }
        } catch (error) {
          console.error('‚ùå Erreur Web Audio API:', error);
          estimateFromFileSize();
        }
      };

      // M√©thode 3: Estimation approximative bas√©e sur la taille du fichier
      const estimateFromFileSize = () => {
        // Estimation tr√®s approximative: ~1MB ‚âà 60 secondes pour MP3 128kbps
        const fileSizeMB = file.size / (1024 * 1024);
        const estimatedMinutes = Math.ceil(fileSizeMB * 1.0); // 1 minute par MB (conservateur)
        const estimatedSeconds = estimatedMinutes * 60;
        
        console.warn(`‚ö†Ô∏è Estimation dur√©e bas√©e sur taille: ${estimatedSeconds}s (${fileSizeMB.toFixed(2)} MB)`);
        resolve(estimatedSeconds);
      };

      // Commencer par la m√©thode 1
      tryAudioElement();
    });
  };

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // V√©rifier que c'est un fichier audio ou vid√©o (webm peut √™tre video/webm)
      const validTypes = ['audio/', 'video/webm', 'video/mp4', 'video/ogg'];
      const isValid = validTypes.some(type => file.type.startsWith(type)) ||
                      file.name.match(/\.(mp3|wav|m4a|webm|ogg|flac|aac|wma)$/i);

      if (!isValid) {
        alert('Veuillez s√©lectionner un fichier audio valide (MP3, WAV, M4A, WebM, etc.).');
        return;
      }
      setSelectedFile(file);
      setAudioDuration(0); // Reset

      // Extraire la dur√©e avec indicateur de chargement
      setIsCalculatingDuration(true);
      console.log('‚è≥ Calcul de la dur√©e en cours...');
      try {
        const duration = await getAudioDuration(file);
        setAudioDuration(duration);
        console.log('‚úÖ Dur√©e audio d√©tect√©e:', duration, 'secondes');
      } catch (error) {
        console.error('‚ùå Erreur lors du calcul de la dur√©e:', error);
        setAudioDuration(0);
      } finally {
        setIsCalculatingDuration(false);
      }
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) return;

    // Si la dur√©e n'a pas √©t√© d√©tect√©e, r√©essayer une derni√®re fois
    let finalDuration = audioDuration;
    if (finalDuration === 0) {
      console.log('‚ö†Ô∏è Dur√©e non d√©tect√©e, nouvelle tentative...');
      setIsCalculatingDuration(true);
      try {
        finalDuration = await getAudioDuration(selectedFile);
        setAudioDuration(finalDuration);
      } finally {
        setIsCalculatingDuration(false);
      }
    }

    // Si toujours pas de dur√©e, bloquer pour le plan Starter
    const { data: subscription } = await supabase
      .from('user_subscriptions')
      .select('plan_type, minutes_quota, minutes_used_this_month')
      .eq('user_id', userId)
      .maybeSingle();

    if (subscription && subscription.plan_type === 'starter') {
      // Si pas de dur√©e d√©tect√©e, bloquer pour √©viter les abus
      if (finalDuration === 0) {
        alert('‚ùå Impossible de d√©tecter la dur√©e du fichier audio.\n\nPour prot√©ger votre quota, nous ne pouvons pas traiter ce fichier. Veuillez essayer avec un autre format (MP3, WAV, M4A recommand√©s) ou contacter le support.');
        return;
      }

      const audioMinutes = Math.ceil(finalDuration / 60);
      const remainingMinutes = subscription.minutes_quota - subscription.minutes_used_this_month;

      // V√©rifier si l'utilisateur a d√©pass√© le quota
      if (subscription.minutes_used_this_month >= subscription.minutes_quota) {
        setShowQuotaFullModal(true);
        return;
      }

      // V√©rifier si l'upload d√©passerait le quota
      if (audioMinutes > remainingMinutes) {
        setUploadQuotaErrorData({ audioDuration: audioMinutes, remainingMinutes });
        setShowUploadQuotaError(true);
        return;
      }

      // Avertir si proche du quota apr√®s upload
      const usageAfterUpload = subscription.minutes_used_this_month + audioMinutes;
      const usagePercent = (usageAfterUpload / subscription.minutes_quota) * 100;
      if (usagePercent > 90) {
        const remainingAfter = subscription.minutes_quota - usageAfterUpload;
        console.log('üü† Quota proche apr√®s upload (>90%), affichage du modal LowQuotaUploadWarning');
        setLowQuotaUploadData({ uploadMinutes: audioMinutes, remainingAfter });
        setShowLowQuotaUploadWarning(true);
        return;
      }
    }

    // Commencer le traitement (peut √™tre appel√© apr√®s confirmation du modal)
    proceedWithUpload();
  };

  // Fonction pour proc√©der √† l'upload (appel√©e apr√®s v√©rifications ou confirmation modal)
  const proceedWithUpload = async () => {
    if (!selectedFile) return;

    setIsProcessing(true);
    const taskId = await addTask({
      type: 'upload_transcription',
      status: 'processing',
      progress: 'D√©marrage du traitement...',
    });

    if (!taskId) {
      alert('Erreur lors de la cr√©ation de la t√¢che');
      setIsProcessing(false);
      return;
    }

    try {
      // 1) Transcrire D'ABORD (avant de cr√©er la r√©union)
      const transcribeProgress = 'Envoi au serveur de transcription...';
      setProgress(transcribeProgress);
      await updateTask(taskId, { progress: transcribeProgress, progress_percent: 20 });
      
      console.log('üì§ Transcription de l\'audio AVANT cr√©ation de la r√©union');
      const transcriptionResult = await transcribeLongAudio(selectedFile, async (msg) => {
        setProgress(msg);
        await updateTask(taskId, { progress: msg, progress_percent: 60 });
      });

      const fullTranscript = transcriptionResult.transcript;
      const actualDuration = Math.round(transcriptionResult.duration_seconds || audioDuration);
      
      console.log('‚úÖ Transcription r√©ussie, dur√©e:', actualDuration, 'secondes');

      // 2) G√©n√©rer le r√©sum√©
      const summaryProgress = 'G√©n√©ration du r√©sum√© IA...';
      setProgress(summaryProgress);
      await updateTask(taskId, { progress: summaryProgress, progress_percent: 80 });
      const { title, summary } = await generateSummary(fullTranscript);

      // 3) Cr√©er la r√©union UNIQUEMENT si transcription + r√©sum√© ont r√©ussi
      const createProgress = 'Enregistrement de la r√©union...';
      setProgress(createProgress);
      await updateTask(taskId, { progress: createProgress, progress_percent: 90 });
      
      const finalTitle = meetingTitle || title || `Upload du ${new Date().toLocaleDateString('fr-FR')}`;
      console.log('üíæ Cr√©ation de la r√©union avec toutes les donn√©es (quota sera d√©bit√© maintenant)');

      const { data: meeting, error: createError } = await supabase
        .from('meetings')
        .insert({
          title: finalTitle,
          transcript: fullTranscript,
          summary,
          duration: actualDuration,
          user_id: userId,
          notes: notes || null,
          suggestions: [],
          audio_url: null,
        })
        .select()
        .maybeSingle();

      if (createError || !meeting) {
        console.error('‚ùå Erreur cr√©ation r√©union:', createError);
        throw new Error('Erreur lors de la cr√©ation de la r√©union');
      }

      console.log('‚úÖ R√©union cr√©√©e avec succ√®s, ID:', meeting.id, '(quota d√©bit√©)');

      setProgress('Termin√© !');

      // Reset UI immediately
      setSelectedFile(null);
      setMeetingTitle('');
      setNotes('');
      setAudioDuration(0);
      setIsCalculatingDuration(false);
      if (fileInputRef.current) fileInputRef.current.value = '';

      // Mark task as completed - this will trigger the notification
      console.log('‚úÖ Marquage de la t√¢che comme termin√©e avec meeting_id:', meeting.id);
      setTimeout(async () => {
        await updateTask(taskId, {
          status: 'completed',
          progress: 'Transcription termin√©e',
          meeting_id: meeting.id,
          progress_percent: 100
        });
      }, 100);

      // Appeler onSuccess pour rafra√Æchir la liste des r√©unions (sans navigation automatique)
      console.log('üîÑ Appel de onSuccess pour rafra√Æchir l\'historique');
      onSuccess(meeting.id);
    } catch (error: any) {
      console.error('Erreur:', error);
      await updateTask(taskId, {
        status: 'error',
        error: error.message || 'Une erreur est survenue'
      });
      alert(`Erreur: ${error.message || 'Une erreur est survenue'}`);
    } finally {
      setIsProcessing(false);
      setProgress('');
    }
  };

  // Handlers pour le modal d'avertissement de quota bas avant upload
  const handleLowQuotaUploadContinue = () => {
    console.log('‚úÖ Utilisateur confirme l\'upload malgr√© le quota bas');
    setShowLowQuotaUploadWarning(false);
    proceedWithUpload();
  };

  const handleLowQuotaUploadCancel = () => {
    console.log('‚ùå Utilisateur annule l\'upload √† cause du quota bas');
    setShowLowQuotaUploadWarning(false);
  };

  return (
    <div className="bg-white rounded-2xl shadow-2xl p-6 md:p-10 border border-orange-100">
      <h2 className="text-2xl md:text-3xl font-bold bg-gradient-to-r from-coral-500 to-sunset-500 bg-clip-text text-transparent mb-6">
        Importer un fichier audio
      </h2>

      <div className="space-y-6">
        {/* Zone de drop/s√©lection */}
        <div className="border-2 border-dashed border-coral-300 rounded-xl p-8 text-center hover:border-coral-500 transition-all bg-gradient-to-br from-orange-50 to-coral-50">
          <input
            ref={fileInputRef}
            type="file"
            accept="audio/*,video/webm,video/mp4,.webm,.mp3,.wav,.m4a,.ogg"
            onChange={handleFileSelect}
            className="hidden"
            id="audio-upload"
            disabled={isProcessing}
          />
          <label
            htmlFor="audio-upload"
            className="cursor-pointer flex flex-col items-center gap-4"
          >
            {selectedFile ? (
              <>
                <FileAudio className="w-16 h-16 text-coral-500" />
                <div className="text-center">
                  <p className="font-semibold text-cocoa-800">{selectedFile.name}</p>
                  <p className="text-sm text-cocoa-600">
                    {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                  {audioDuration > 0 && (
                    <p className="text-sm text-green-600 font-semibold mt-1">
                      Dur√©e: {Math.floor(audioDuration / 60)}:{String(audioDuration % 60).padStart(2, '0')}
                    </p>
                  )}
                </div>
                <button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    setSelectedFile(null);
                    setAudioDuration(0);
                    setIsCalculatingDuration(false);
                    if (fileInputRef.current) fileInputRef.current.value = '';
                  }}
                  className="text-sm text-coral-600 hover:text-coral-700 font-semibold flex items-center gap-1"
                >
                  <X className="w-4 h-4" />
                  Supprimer
                </button>
              </>
            ) : (
              <>
                <Upload className="w-16 h-16 text-coral-400" />
                <div>
                  <p className="font-semibold text-cocoa-800">
                    Cliquez pour s√©lectionner un fichier audio
                  </p>
                  <p className="text-sm text-cocoa-600 mt-1">
                    MP3, WAV, M4A, WebM, OGG, FLAC, etc.
                  </p>
                </div>
              </>
            )}
          </label>
        </div>

        {/* Titre */}
        <div>
          <label htmlFor="upload-title" className="block text-sm font-semibold text-cocoa-800 mb-2">
            Titre de la r√©union (optionnel)
          </label>
          <input
            type="text"
            id="upload-title"
            value={meetingTitle}
            onChange={(e) => setMeetingTitle(e.target.value)}
            placeholder="Ex: R√©union client - Projet X"
            className="w-full px-4 py-3 border-2 border-orange-200 rounded-xl focus:outline-none focus:border-coral-500 focus:ring-4 focus:ring-coral-500/20 text-cocoa-800"
            disabled={isProcessing}
          />
        </div>

        {/* Notes */}
        <div>
          <label htmlFor="upload-notes" className="block text-sm font-semibold text-cocoa-800 mb-2">
            Notes compl√©mentaires (optionnel)
          </label>
          <textarea
            id="upload-notes"
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            placeholder="Ajoutez vos notes ici..."
            className="w-full h-24 px-4 py-3 border-2 border-orange-200 rounded-xl focus:outline-none focus:border-coral-500 focus:ring-4 focus:ring-coral-500/20 resize-none text-cocoa-800"
            disabled={isProcessing}
          />
        </div>

        {/* Indicateur de calcul de dur√©e */}
        {isCalculatingDuration && selectedFile && (
          <div className="p-4 bg-blue-50 border-2 border-blue-200 rounded-xl">
            <p className="text-sm font-semibold text-blue-800 flex items-center gap-2">
              <Loader className="w-4 h-4 animate-spin" />
              Calcul de la dur√©e du fichier en cours...
            </p>
            <p className="text-xs text-blue-600 mt-1">
              Cela peut prendre quelques secondes pour les fichiers volumineux
            </p>
          </div>
        )}

        {/* Affichage de la dur√©e d√©tect√©e */}
        {audioDuration > 0 && !isCalculatingDuration && (
          <div className="p-4 bg-green-50 border-2 border-green-200 rounded-xl">
            <p className="text-sm font-semibold text-green-800 flex items-center gap-2">
              ‚úÖ Dur√©e d√©tect√©e : {Math.floor(audioDuration / 60)} min {audioDuration % 60} sec
            </p>
          </div>
        )}

        {/* Bouton traiter */}
        <button
          onClick={handleUpload}
          disabled={!selectedFile || isProcessing || isCalculatingDuration || audioDuration === 0}
          className={`w-full py-4 rounded-xl font-bold text-lg transition-all flex items-center justify-center gap-3 ${
            !selectedFile || isProcessing || isCalculatingDuration || audioDuration === 0
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-gradient-to-r from-coral-500 to-coral-600 text-white hover:from-coral-600 hover:to-coral-700 shadow-lg hover:shadow-xl'
          }`}
        >
          {isProcessing ? (
            <>
              <Loader className="w-6 h-6 animate-spin" />
              <span>Traitement en cours...</span>
            </>
          ) : isCalculatingDuration ? (
            <>
              <Loader className="w-6 h-6 animate-spin" />
              <span>Analyse du fichier...</span>
            </>
          ) : (
            <>
              <FileAudio className="w-6 h-6" />
              <span>Transcrire et g√©n√©rer le r√©sum√©</span>
            </>
          )}
        </button>

        {/* Progression */}
        {progress && (
          <div className="space-y-3">
            <div className="p-4 bg-blue-50 border-2 border-blue-200 rounded-xl">
              <p className="text-sm font-semibold text-blue-800 flex items-center gap-2">
                <Loader className="w-4 h-4 animate-spin" />
                {progress}
              </p>
            </div>
            <div className="p-3 bg-orange-50 border-2 border-orange-200 rounded-xl">
              <p className="text-xs font-semibold text-orange-800 flex items-center gap-2">
                ‚ö†Ô∏è Ne fermez pas cette page et ne rafra√Æchissez pas le navigateur pendant le traitement !
              </p>
              <p className="text-xs text-orange-700 mt-1">
                Le traitement se fait dans votre navigateur. Si vous rafra√Æchissez la page, vous perdrez votre progression.
              </p>
            </div>
          </div>
        )}
      </div>

      {/* Modal de quota compl√®tement atteint */}
      <QuotaFullModal
        isOpen={showQuotaFullModal}
        onClose={() => setShowQuotaFullModal(false)}
        onUpgrade={() => {
          setShowQuotaFullModal(false);
          // Rediriger vers Settings (g√©r√© par le parent via onSuccess)
          window.location.hash = 'settings';
        }}
      />

      {/* Modal d'erreur d'upload quota d√©pass√© */}
      <UploadQuotaErrorModal
        isOpen={showUploadQuotaError}
        onClose={() => setShowUploadQuotaError(false)}
        onUpgrade={() => {
          setShowUploadQuotaError(false);
          // Rediriger vers Settings
          window.location.hash = 'settings';
        }}
        audioDuration={uploadQuotaErrorData.audioDuration}
        remainingMinutes={uploadQuotaErrorData.remainingMinutes}
      />

      {/* Modal d'avertissement quota bas avant upload */}
      <LowQuotaUploadWarningModal
        isOpen={showLowQuotaUploadWarning}
        onClose={handleLowQuotaUploadCancel}
        onContinue={handleLowQuotaUploadContinue}
        uploadMinutes={lowQuotaUploadData.uploadMinutes}
        remainingAfter={lowQuotaUploadData.remainingAfter}
      />
    </div>
  );
};

